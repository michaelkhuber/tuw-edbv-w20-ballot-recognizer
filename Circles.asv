function ballotCircles = Circles(ballot, ballotFilename)
    global showPlot;
    global savePlot;
    showPlot = false;
    savePlot = true;
    
    global pltM;
    global pltN;
    pltM = 1;
    pltN = 1;
    pltCount = 1;
    
    if(showPlot)
        f = figure(2);
        clf('reset');
    elseif(savePlot)
        f = figure('visible','off');
    end
    
    %get greyscale image
    ballot = im2double(ballot);
    ballot = im2gray(ballot);
    
    %crop image so that only left circles are left 
    ballot=ballot(300:2150,1:500); 
    
    %find 10 "strongest" circles, area 15-60 maybe has to be adjusted (o in text may be recognized as circle) 
    [centers, radii, metric] = imfindcircles(ballot,[30 80],'ObjectPolarity','bright','Sensitivity',0.90);
    
    if(showPlot || savePlot) 
        subplot(pltM, pltN, pltCount); pltCount = pltCount + 1;
        hold on;
        imshow(ballot);
        viscircles(centers, radii,'EdgeColor','b');
        title("Hough Circles");
    end
    
    % if no circles were found, avoid any further errors
    if(isempty(centers))
        ballotCircles = [];
    else
        %find biggest circle and find circles within 0.9 % deviation
        rmax = max(radii);
        i = radii > rmax * 0.8;
        centers = centers(i, :);
        radii = radii(i);

%         centers = centers(1:10,:);
%         radii = radii(1:10,:);
        
        if(showPlot || savePlot) 
            viscircles(centers, radii,'EdgeColor','r');
            hold off;
        end
        
        %sort circles by y coordinate  
        centersSorted = sortrows(centers,2); 
        u = centersSorted(:,1);
        v = centersSorted(:,2);

        %calculate boundingboxes
        for j = 1:length(u)
            x0 = round(u(j) - radii(j));
            x1 = round(u(j) + radii(j)); 
            y0 = round(v(j) - radii(j));
            y1 = round(v(j) + radii(j));
            
            if(x0 > size(ballot, 2)), x0  = size(ballot, 2); end
            if(x1 > size(ballot, 2)), x1  = size(ballot, 2); end
            if(y0 > size(ballot, 1)), y0  = size(ballot, 2); end
            if(y1 > size(ballot, 1)), y1  = size(ballot, 2); end

            %create boundingboxes of circles 
            rectangle('Position', [x0 y0 radii(j)*2 radii(j)*2]);
            ballotCircles{j} = ballot(y0:y1,x0:x1);
        end
    end
        
    if(savePlot)
        print(f,strcat("resources/results/Circles_", ballotFilename),'-dpng','-r700'); 
        clf(f);
        clear f;
    end
end

function [locMin, pltCount] = histogram(grayImg, plotTitle, pltCount) 
    global showPlot;
    global savePlot;
    global pltM;
    global pltN;
    
    mask = grayImg;
    
    [counts, edges] = histcounts(mask, 100);
    [locMin, locMax] = getLocals(counts, 0.3, 0.01);
    edges = edges(1:(length(edges)-1)); 
    
    if(showPlot || savePlot) 
        subplot(pltM, pltN, pltCount); pltCount = pltCount + 1;
        hold on;
        plot(edges,counts,'Color', 'red');
        plot(edges(locMax),counts(locMax),'^','Color', 'blue');
        plot(edges(locMin),counts(locMin),'v','Color', 'blue');
        
        title(plotTitle);
        hold off;
    end
    
    locMin = edges(locMin);
end


%computes a local minimum and local maximum with difference greater than
%prominence
function [locMin, locMax] = getLocals(counts, maxProminence, minProminence)
    maxProminence = maxProminence * max(counts(:));

    %get maxima
    maxima = [];
    for i = 2:(length(counts)-1)
        if( (counts(i) > counts(i-1)) && (counts(i) > counts(i+1)) )
            maxima = [maxima, i];
        end
    end
    
    %edge cases
    if( counts(1) > counts(2) )
        maxima = [1, maxima];
    end
    if( counts(length(counts)) > counts(length(counts)-1) )
        maxima = [maxima, length(counts)];
    end
    
    minima = [];
    for i = 2:(length(counts)-1)
        if( (counts(i) < counts(i-1)) && (counts(i) < counts(i+1)) )
            minima = [minima, i];
        end
    end
    
    %edge cases
    if( counts(1) < counts(2) )
        minima = [1, minima];
    end
    if( counts(length(counts)) < counts(length(counts)-1) )
        minima = [minima, length(counts)];
    end
    
    prominentMaxima = [];
    prominentMinima = [];
    for i = 1:length(maxima)
        if( counts(maxima(i)) > maxProminence )
            for j = 1:length(minima)
                if( minima(j) < maxima(i) && counts(minima(j)) < minProminence * counts(maxima(i)) )
                    prominentMaxima = [prominentMaxima, maxima(i)];
                    prominentMinima = [prominentMinima, minima(j)];
                end
            end
        end
    end
    
    %get right most prominent maximum
    locMax = max(prominentMaxima);
    
    %and its right most assigned prominent minimum
    locMin = max(prominentMinima(prominentMaxima==locMax));
end